name: Sequential PR Automerger

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '*/10 * * * *' # Runs every 10 minutes (reduced from every 1 minute to avoid rate limiting)

# Ensures only one instance of this workflow runs at a time for this group.
# If a run is in progress, new scheduled triggers will be skipped until it completes.
concurrency:
  group: ${{ github.workflow }}-merger
  cancel-in-progress: false # Let the current merging process finish

permissions:
  contents: write # To merge branches and delete branches
  pull-requests: write # To merge PRs and interact with them

jobs:
  automerge:
    runs-on: ubuntu-latest
    env:
      # --- CONFIGURATION ---
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub Actions
      BASE_BRANCH: 'master' # The branch PRs should target to be considered for merging
      MERGE_METHOD: 'SQUASH' # MERGE, SQUASH, or REBASE
      DELETE_BRANCH_AFTER_MERGE: 'true' # 'true' or 'false'
      # Optional: Only merge PRs with this label. Leave empty to disable.
      REQUIRED_LABEL: 'automerge' # e.g., 'ready-to-merge' or 'automerge'
      # --- END CONFIGURATION ---

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for gh cli to work properly with branches

      - name: Get Default Branch if BASE_BRANCH is not set (or to verify)
        if: env.BASE_BRANCH == '' # Or if you want to dynamically fetch it
        run: |
          DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef --jq '.defaultBranchRef.name')
          echo "DEFAULT_BRANCH_NAME=${DEFAULT_BRANCH}" >> $GITHUB_ENV
          echo "Using default branch: $DEFAULT_BRANCH"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # gh cli needs token

      - name: Set Base Branch to Use
        run: |
          BRANCH_TO_USE="${{ env.BASE_BRANCH }}"
          if [ -z "$BRANCH_TO_USE" ]; then
            BRANCH_TO_USE="${{ env.DEFAULT_BRANCH_NAME }}"
          fi
          echo "BASE_BRANCH_EFFECTIVE=${BRANCH_TO_USE}" >> $GITHUB_ENV
          echo "Will process PRs targeting: ${BRANCH_TO_USE}"

      - name: Fetch Mergeable PRs
        id: get_prs
        run: |
          echo "Fetching PRs targeting ${{ env.BASE_BRANCH_EFFECTIVE }}..."
          
          # Create label filter
          if [ -n "${{ env.REQUIRED_LABEL }}" ]; then
            echo "Filtering for label: ${{ env.REQUIRED_LABEL }}"
            LABEL_FILTER="select((.labels | length > 0) and (.labels | map(.name) | index(\"${{ env.REQUIRED_LABEL }}\")))"
          else
            echo "No label filter applied"
            LABEL_FILTER="."
          fi

          # Fetch PRs that are:
          # - Open
          # - Not drafts
          # - Target the specified BASE_BRANCH
          # - Are mergeable (no conflicts)
          # - Have required checks passing
          # - Have required reviews approved
          # - (Optional) Have the REQUIRED_LABEL
          # - Sorted by creation date (oldest first) for FIFO
          PR_NUMBERS=$(gh pr list \
            --state open \
            --base "${{ env.BASE_BRANCH_EFFECTIVE }}" \
            --json "number,isDraft,mergeable,mergeStateStatus,reviewDecision,labels,createdAt" \
            --jq ".[] | 
                select(
                  .isDraft == false and 
                  .mergeable == true and
                  (.mergeStateStatus == \"CLEAN\" or .mergeStateStatus == \"HAS_HOOKS\") and
                  (.reviewDecision == \"APPROVED\" or .reviewDecision == null)
                ) | 
                $LABEL_FILTER |
                .number" | tr '\n' ' ')
          
          if [ -z "$PR_NUMBERS" ]; then
            echo "No mergeable PRs found meeting criteria."
            echo "PR_NUMBERS_TO_MERGE=" >> $GITHUB_OUTPUT
          else
            echo "Found PRs to merge (numbers): $PR_NUMBERS"
            echo "PR_NUMBERS_TO_MERGE=$PR_NUMBERS" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge PRs Sequentially
        if: steps.get_prs.outputs.PR_NUMBERS_TO_MERGE != ''
        run: |
          echo "Attempting to merge PRs: ${{ steps.get_prs.outputs.PR_NUMBERS_TO_MERGE }}"
          
          # Build merge command arguments
          MERGE_ARGS=""
          if [ "${{ env.DELETE_BRANCH_AFTER_MERGE }}" == "true" ]; then
            MERGE_ARGS="--delete-branch"
          fi

          case "${{ env.MERGE_METHOD }}" in
            SQUASH)
              MERGE_ARGS="$MERGE_ARGS --squash"
              ;;
            REBASE)
              MERGE_ARGS="$MERGE_ARGS --rebase"
              ;;
            MERGE)
              MERGE_ARGS="$MERGE_ARGS --merge"
              ;;
            *)
              echo "Invalid MERGE_METHOD: ${{ env.MERGE_METHOD }}. Using default (merge commit)."
              MERGE_ARGS="$MERGE_ARGS --merge"
              ;;
          esac
          
          for pr_number in ${{ steps.get_prs.outputs.PR_NUMBERS_TO_MERGE }}; do
            echo "Attempting to merge PR #$pr_number with method: ${{ env.MERGE_METHOD }}"
            
            # Verify PR is still mergeable right before attempting to merge
            PR_STATUS=$(gh pr view $pr_number --json mergeable,mergeStateStatus --jq '[.mergeable, .mergeStateStatus] | @tsv')
            MERGEABLE=$(echo "$PR_STATUS" | cut -f1)
            MERGE_STATE=$(echo "$PR_STATUS" | cut -f2)
            
            if [ "$MERGEABLE" != "true" ] || [ "$MERGE_STATE" != "CLEAN" -a "$MERGE_STATE" != "HAS_HOOKS" ]; then
              echo "PR #$pr_number is no longer mergeable (mergeable=$MERGEABLE, state=$MERGE_STATE). Skipping."
              continue
            fi

            if gh pr merge $pr_number $MERGE_ARGS --admin; then
              echo "✅ Successfully merged PR #$pr_number"
              # Wait to allow CI to catch up (CI might be needed for subsequent PRs)
              echo "Waiting 10 seconds before processing the next PR..."
              sleep 10
            else
              echo "❌ Failed to merge PR #$pr_number. Continuing to the next PR."
              # Optional: Add a label to indicate merge failure
              # gh pr edit $pr_number --add-label "merge-failed"
            fi
          done
          echo "All queued PRs processed."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: No PRs to merge
        if: steps.get_prs.outputs.PR_NUMBERS_TO_MERGE == ''
        run: echo "No PRs met the criteria for merging at this time."
